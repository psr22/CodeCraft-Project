/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if (!root)
            return {};      // no nodes to traverse

        vector <vector <int>> vv;
        queue <TreeNode*> q;    // queue to store all nodes in each 'level'
        q.push (root);

        while (!q.empty()) {    // BFS method   
            vector <int> v;     // stores values of all nodes in 1 level
            int n = q.size();   // store val as size of q changes later in loop

            for (int i = 0; i < n; i ++) {
                TreeNode* curr = q.front();
                q.pop();    // remove ele in level to be traversed

                if (curr -> left)
                    q.push (curr -> left);
                if (curr -> right)
                    q.push (curr -> right);

                // before pushing val add children node into queue
                v.push_back (curr -> val);
            }   
            vv.push_back (v);   // update ans 
        }
        return vv;
    }
};