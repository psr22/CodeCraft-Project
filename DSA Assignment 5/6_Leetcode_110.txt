/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int dfs_height (TreeNode* root) {
        if (!root)
            return 0;       // null node

        int l = dfs_height (root -> left), r = dfs_height (root -> right);
        // we have to check if abs val of diff of subtree heights is <= 1

        if (l >= 0 && r >= 0 && abs (l - r) <= 1)       // for balanced tree
            return 1 + max (l , r);     // max depth / height of subtree
        return -1;      
    }
    bool isBalanced(TreeNode* root) {
        if (dfs_height (root) == -1)        // tree is unbalanced
            return false;
        return true;
    }
};