/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* head = new ListNode ();       
        ListNode* curr = head;      // used to iterate and add elements

        while (list1 && list2) {        // add elements acc to val
            if (list1 -> val < list2 -> val) {
                curr -> next = list1;       // these 2 lines are for adding new node
                list1 = list1 -> next;
            }
            else {
                curr -> next = list2;
                list2 = list2 -> next;
            }
            curr = curr -> next;        // for next node
        }
        while (list1) {     // check for list1 if some elements are left to be added
            curr -> next = list1;
            list1 = list1 -> next;
            curr = curr -> next;
        }   
        while (list2) {     // similarly check for list2
            curr -> next = list2;
            list2 = list2 -> next;
            curr = curr -> next;
        }
        return (head -> next);      // combined sorted list head
    }
};